package net.developia.aop;

import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

import lombok.extern.log4j.Log4j;

@Aspect
@Log4j
@Component
public class LogAdvice {

	// aop 할시 protected 이상이여야 함.
	// spring aop 에 execution 표현식 : 메서드 기준으로 PointCut을 설정
	@Before( "execution(* net.developia.service.SampleService*.*(..))")
	public void logBefore() {
		log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
		log.info("@@@@@@@@@before adviece@@@@@@@@@@@");
		log.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");

	}
	
	@Before( "execution(* net.developia.service.SampleService*.doAdd(String ,String))&& args(str1,str2)")
	public void logBeforeWithParam(String str1, String str2) {
		log.info("str1:"+str1);
		log.info("str2:"+str2);
		
	}
	
	@AfterThrowing(pointcut = "exectution(* net.developia.service.SampleService*.*(..)",throwing="exception")
	public void logException(Exception exception)_
	log.info("Exception....!!!!");
	log.info("exception: "+exception);
}
